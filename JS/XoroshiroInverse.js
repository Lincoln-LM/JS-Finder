function calculateState(res) {
    // precomputed
    let bitmat = [18446744073709551617n, 20284885483748687928570893303809n, 332306999256960848837486581555136513n, 1661717559013652720345964354035976448n, 2663993802454764070349439645142548482n, 95711231378451757507131022724307697859n, 21602901370932144985238608404058095875n, 74909593634744164624465814906080807633n, 170507405837838652846161371357876260308n, 15444618855641040870442700048698514125n, 23804303250665982048996650364463573526n, 101053950235834374802749390681714615309n, 174822769297343376685732513633102022852n, 148631551223252383639154049541655797115n, 300474914895877623199690704056502954281n, 239734323237362132003223401645285550961n, 85590308761352424105727073294047049439n, 214938973692909211962237244798845827333n, 250270925666460676585907765453210101601n, 182799060119388198011942002763173727366n, 158915172139911524770190402760194939634n, 117472892509588661201036821400183860917n, 176722450830693953571129399098120173570n, 30308151714636407273533863755381113478n, 247197950512869309769852422263789551124n, 338305831042852796248845707390548967327n, 125381672985003649971824736479861012858n, 232250648016252446043285640488401539386n, 332478356814698872973061642632092430688n, 132433705155505339995748430975010172733n, 38140816777417425001015138534348896438n, 40640616739274978601185372186112245091n, 339650660958135287201677628755368348374n, 269078236432286190268901933435565415376n, 225733304024434891434376261900319306715n, 120673639943505927079353973294214124879n, 20164892463811187741748828231410944117n, 267696542876052763980231533645574233256n, 16868248334567962701197487642121213464n, 276964351980171947232784633605741749440n, 50882166402583744371706581338100766921n, 162723903263554247438069992967318935162n, 125833904169718275005509645318766809562n, 146193134133836920594611619270795743590n, 226170592006060162799228311310526299622n, 170942632484144519452981244797856702212n, 14444069687375977555201105725324016484n, 18563324705213192383896710425364176416n, 272292253537075051697825130408185470164n, 63121787764442311859191078188898123922n, 12469447722597663513079219357066731684n, 120271815250345850074425168905100761845n, 56273781745104210265550910422572138276n, 152922677760108863666102276088081660461n, 140078769111720417166412277247086241520n, 148191310494554881659325155599220562687n, 316881525541327066928129499439037905840n, 236948989665703239087498885242170645655n, 155908838211386412982689282146317281177n, 199344672799803621394462758644584766705n, 158625190865261650153071040763218837315n, 107045819553778053347838101648836609516n, 258236340598961720835968334966535951344n, 192101851954516908986836899826668847907n, 253955310487632729937846119004414333643n, 79104574705911796360258635506960914952n, 44236965921403668869855895712794852945n, 216465281273836520706528301435487078801n, 209216978135436893991846100462950829499n, 317056857444769316489084657273478786473n, 227180937177769304149866146883705759067n, 33085205715342134280537484876561997709n, 61422632073435415067472445858795558987n, 57312477317857167461612518861660031643n, 159891998432864497765374701777934603115n, 137852023519729026730780045806628502639n, 235982503197943606242752589438099541274n, 245297690326629123940920470307000305980n, 252732932243088165995825409629097386333n, 138704362316082969396533865852761342478n, 249389388508768764764488989163498066948n, 223046036906338226821350989691784543963n, 20042249814246663667010967951303767301n, 268867140825723575844600118623366552567n, 230937722854893227947945354978707270356n, 282571926088751356298618276986692494530n, 154879804910117200225240179411143343408n, 150267077174732080276265162577317201541n, 295002772390704382384826857902756767803n, 155341247536718133381409383216060145899n, 93823881088174186000960746343041108095n, 287426284292850520987262752680153626907n, 249515110607183986013308580411338591213n, 337951321179662131887002155503086021303n, 150026205692049382790796338029344947678n, 58686853422144875891247952628404226781n, 139663153364382714799001347831884730314n, 168521391887913424682352695823798638420n, 89285683395016024349990373518568790014n, 232931117832538148317070363683563524043n, 162052460503250840651262898292008328680n, 68604932817806081898375977110629191594n, 94420225139797209187690506391142820714n, 272341133415735216183913542930479527135n, 28686184571324375768384798841956982682n, 165251406819531969021903848436837654297n, 139942576019632790623098697967994608567n, 57125756532481161501396437563803259015n, 304528374666335905593505275434331334152n, 85643161276767915199689879762267704147n, 323894234391698044197921065853535874468n, 338271641905554167886834873204269389804n, 5229609513262026103964155375650775823n, 40526370360885081469616177119326138010n, 96263039281098138263231904970679435114n, 167899198569311294038383902326943063286n, 66645773676340059600746962490626471586n, 272772040860758228214752467699287140820n, 117060419452137392366235733028224543864n, 317420550558250826285732808511669760713n, 106015360967381854666369633166431104712n, 68762239006424397782331055344995469946n, 206865548292008519648937020175630051513n, 250326747034511608505131581279594407730n, 17835221740581219393381232126128851176n, 26067712339931064558048247501683693938n, 78625495277959586466232737879832312261n, 27241545647790481884990606855858204291n];
    let pivot = 0;
    let isFound = false;
    for (i=0;i<128;i++) {
        isFound = false;
        for (j=i;j<128;j++) {
            let check = BigInt(1);
            check <<= BigInt(128-i-1);
            if (isFound) {
                if (BigInt(bitmat[j]&check)==BigInt(check)) {
                    bitmat[j] ^= bitmat[pivot];
                    res[j] ^= res[pivot];
                }
            }
            else {
                if (BigInt(bitmat[j]&check)==BigInt(check)) {
                    isFound = true;
                    temp = bitmat[pivot];
                    bitmat[pivot] = bitmat[j];
                    bitmat[j] = temp;
                    temp = res[pivot];
                    res[pivot] = res[j];
                    res[j] = temp;
                }
            }
        }
        if (isFound) {
            pivot += 1;
        }
    }
    for (i=127;i>=0;i--) {
        let check = BigInt(1);
        check <<= BigInt(128-i-1);
        for (j=i-1;j>=0;j--) {
            if ((BigInt(bitmat[j])&BigInt(check))==BigInt(check)) {
                bitmat[j] ^= bitmat[i];
                res[j] ^= res[i];
            }
        }
    }
    let s0 = BigInt(0);
    let s1 = BigInt(0);
    for (i=0;i<64;i++) {
        s0 |= BigInt(res[i])<<BigInt(63-i);
    }
    for (i=0;i<64;i++) {
        s1 |= BigInt(res[i+64])<<BigInt(63-i);
    }
    return [s0.toString(16),s1.toString(16)];
}